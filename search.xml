<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>知识图谱初体验-疾病自动问答</title>
      <link href="/2020/05/12/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%88%9D%E4%BD%93%E9%AA%8C-%E7%96%BE%E7%97%85%E8%87%AA%E5%8A%A8%E9%97%AE%E7%AD%94/"/>
      <url>/2020/05/12/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%88%9D%E4%BD%93%E9%AA%8C-%E7%96%BE%E7%97%85%E8%87%AA%E5%8A%A8%E9%97%AE%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<h1 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a>楔子</h1><p>之前一直觉得知识图谱挺有意思，这两天忙里偷闲，在 GitHub 上看到了 liuhuanyong 大佬开源的项目，于是便发动 clone 大法搞下来玩了玩儿。有一说一，大佬流弊，但是文档不是很完善，给东哥这种知识图谱零基础的小白造成了些许困扰，好在 issue 区小伙伴的精彩评论拯救了我，于是便决定把这次游玩的经历记录下来，供像我一样的知识图谱零基础小白上手。</p><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><div id="flowchart-0" class="flow-chart"></div><h1 id="使用-git-克隆代码"><a href="#使用-git-克隆代码" class="headerlink" title="使用 git 克隆代码"></a>使用 git 克隆代码</h1><p>代码仓库：<a href="https://github.com/liuhuanyong/QASystemOnMedicalKG" target="_blank" rel="noopener">https://github.com/liuhuanyong/QASystemOnMedicalKG</a></p><p>GitHub 上的项目介绍：</p><blockquote><p>知识图谱是目前自然语言处理的热门方向，关于较全面的参考资料，可以查看我的 ccks2018 参会总结(<a href="https://github.com/liuhuanyong/CCKS2018Summary" target="_blank" rel="noopener">https://github.com/liuhuanyong/CCKS2018Summary</a> )。<br>与知识图谱相关的另一种形态，即事理图谱，本人在这方面也尝试性地积累了一些工作，可参考：(<a href="https://github.com/liuhuanyong/ComplexEventExtraction" target="_blank" rel="noopener">https://github.com/liuhuanyong/ComplexEventExtraction</a> )。<br>关于知识图谱概念性的介绍就不在此赘述。目前知识图谱在各个领域全面开花，如教育、医疗、司法、金融等。本项目立足医药领域，以垂直型医药网站为数据来源，以疾病为核心，构建起一个包含 7 类规模为 4.4 万的知识实体，11 类规模约 30 万实体关系的知识图谱。 本项目将包括以下两部分的内容：</p><ol><li>基于垂直网站数据的医药知识图谱构建</li><li>基于医药知识图谱的自动问答</li></ol></blockquote><p>完整文档请参考项目主页的 README。</p><pre><code class="shell"># clone 代码git clone https://github.com/liuhuanyong/QASystemOnMedicalKG</code></pre><h1 id="安装-python-依赖"><a href="#安装-python-依赖" class="headerlink" title="安装 python 依赖"></a>安装 python 依赖</h1><pre><code class="shell">pip install py2neo pyahocorasick</code></pre><h1 id="通过-docker-启动-neo4j"><a href="#通过-docker-启动-neo4j" class="headerlink" title="通过 docker 启动 neo4j"></a>通过 docker 启动 neo4j</h1><p>本项目使用 neo4j 图数据库来存储实体和关系，因此需要本地安装启动一个 neo4j 数据库。看了看 neo4j 的<a href="https://neo4j.com/developer/docker-run-neo4j/" target="_blank" rel="noopener">安装手册</a>，发现有<a href="https://hub.docker.com/_/neo4j/?tab=description" target="_blank" rel="noopener">官方的 docker 镜像</a>，深爱 docker 的东哥顺手写了一个 docker-compose 文件，通过一行命令启动 neo4j，异常舒适。</p><p>如果你还没有安装 <code>docker</code>，请参考以下链接：</p><ul><li>Windows 用户：<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener">https://hub.docker.com/editions/community/docker-ce-desktop-windows</a></li><li>Mac 用户：<a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac/" target="_blank" rel="noopener">https://hub.docker.com/editions/community/docker-ce-desktop-mac/</a></li><li>Ubuntu 用户：<a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/ubuntu/</a></li></ul><p>如果你是 Linux 用户，还需要单独安装 <code>docker-compose</code> 命令：</p><pre><code class="shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-compose</code></pre><p>docker-compose 安装文档：<a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">https://docs.docker.com/compose/install/#install-compose</a></p><p>在 docker 和 docker-compose 都安装好了以后，就可以通过 docker-compose 一键启动 neo4j 啦！把我写的<code>docker-compose.yml</code>文件贴出来：</p><pre><code class="yaml">version: &quot;3&quot;services:  neo4j:    image: neo4j:latest    restart: always    ports:      - 7474:7474      - 7687:7687    volumes:      - ./data:/data      - ./logs:/logs      - ./import:/var/lib/neo4j/import      - ./plugins:/plugins    environment:      NEO4J_AUTH: neo4j/lhy123 # 用户名/密码</code></pre><p>需要在 build_medicalgraph.py 和 answer_search.py 两个文件中，将 Graph 的 user, password 修改 <code>NEO4J_AUTH</code> 设置的值，且用户名必须为 neo4j，否则 neo4j 初始化时会报错:</p><pre><code class="python">self.g = Graph(            host=&quot;127.0.0.1&quot;,  # neo4j 搭载服务器的ip地址，ifconfig可获取到            http_port=7474,  # neo4j 服务器监听的端口号            user=&quot;neo4j&quot;,  # 改成上面docker-compose文件中NEO4J_AUTH字段设定的值            password=&quot;lhy123&quot;  # 改成上面docker-compose文件中NEO4J_AUTH字段设定的值            )</code></pre><p>在项目目录下新建目录 docker，然后把上面的代码复制粘贴到 docker 目录下的 docker-compose.yml 文件中，通过 docker-compose 命令就可以启动啦！是不是很方便？</p><pre><code class="shell">cd dockerdocker-compose up -d</code></pre><p>用浏览器打开 <a href="http://127.0.0.1:7474/browser/" target="_blank" rel="noopener">http://127.0.0.1:7474/browser/</a> 就可以看到 neo4j 的管理界面<br><img src="https://img.coderai.cn/hexo/20200512013601.png" alt="neo4j 管理界面"></p><h1 id="向-neo4j-中导入节点和关系"><a href="#向-neo4j-中导入节点和关系" class="headerlink" title="向 neo4j 中导入节点和关系"></a>向 neo4j 中导入节点和关系</h1><p>将<code>build_medicalgraph.py</code>文件中的 main 函数修改为以下内容：</p><pre><code class="python">if __name__ == &#39;__main__&#39;:    handler = MedicalGraph()    handler.create_graphnodes()    handler.create_graphrels()</code></pre><p>然后执行<code>python build_medicalgraph.py</code>即可导入。但是这种导入方式耗时长，我第一次导入数据的时候花了大概一个多小时。</p><p>所以，我把我导入过的数据分享出来，大家可以直接下载使用，免除导入数据耗时长的烦恼。<br>下载地址：</p><ul><li>百度网盘：<a href="https://pan.baidu.com/s/1gCdFJDB3JcLvTsJos3Xr6g" target="_blank" rel="noopener">https://pan.baidu.com/s/1gCdFJDB3JcLvTsJos3Xr6g</a> 提取码：fj2g</li><li>Google Drive: <a href="https://drive.google.com/open?id=1Ie3Gxl_0TweLCfh-3yjrIWHWQ8oBZLc-" target="_blank" rel="noopener">https://drive.google.com/open?id=1Ie3Gxl_0TweLCfh-3yjrIWHWQ8oBZLc-</a></li></ul><p>将下载得到的压缩包解压，会得到 data、logs、import、plugins 三个文件夹，把它们都移动到 docker 目录内，然后再执行<code>docker-compose up -d</code>即可启动。</p><h1 id="启动对话机器人"><a href="#启动对话机器人" class="headerlink" title="启动对话机器人"></a>启动对话机器人</h1><p>直接通过<code>python chatbot_graph.py</code>启动即可，效果截图：<br><img src="https://img.coderai.cn/hexo/20200512013926.png" alt="东哥和人工智障小勇的对话"></p><h1 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h1><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始e=>end: 结束op1=>operation: 克隆代码op2=>operation: 安装python依赖op3=>operation: 通过docker启动neo4jop4=>operation: 向neo4j中导入节点和关系op5=>operation: 启动对话机器人st->op1->op2->op3->op4->op5->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      
      
      <categories>
          
          <category> 知识图谱 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose下载镜像</title>
      <link href="/2020/03/21/docker-compose%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F/"/>
      <url>/2020/03/21/docker-compose%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>国内通过 github 下载 docker-compose 实在是太慢了。。。</p></blockquote><p><a href="/attachment/docker-compose-Linux-x86_64">docker-compose-Linux-x86_64 V1.25.4</a></p>]]></content>
      
      
      <categories>
          
          <category> 云备胎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10分钟搭建酷炫博客</title>
      <link href="/2020/03/07/10%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E9%85%B7%E7%82%AB%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/03/07/10%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E9%85%B7%E7%82%AB%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="楔子"><a href="#楔子" class="headerlink" title="楔子"></a>楔子</h1><blockquote><p>之前的腾讯云备案被吊销了，东哥留下了悔恨的泪水😭加之之前买的小水管，磁盘inode满了，一直没时间去排查原因修复，于是……</p><p>重新拾起了Hexo，加上最近发现了一款心水的主题，便动手把博客通过Github Pages又搭了起来。</p></blockquote><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h1 id="开通Github-Pages服务"><a href="#开通Github-Pages服务" class="headerlink" title="开通Github Pages服务"></a>开通Github Pages服务</h1><h1 id="Hexo自动发布到Github-Pages"><a href="#Hexo自动发布到Github-Pages" class="headerlink" title="Hexo自动发布到Github Pages"></a>Hexo自动发布到Github Pages</h1><h1 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h1><blockquote><p>讲道理，只要支持静态页面托管服务的网站都可以使用Hexo一键部署、更新，比如Gitlab, Gitee等。嫌Github访问速度慢的同学也可以使用国内的Gitee提供的<a href="https://gitee.com/help/articles/4136" target="_blank" rel="noopener">码云Pages</a>服务。</p><p>讲道理，Hexo官网提供了其他好看的主题，可以在这里找到：<a href="https://hexo.io/themes" target="_blank" rel="noopener">https://hexo.io/themes</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 折腾日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
